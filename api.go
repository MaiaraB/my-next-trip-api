/*
 * Flight Planner
 *
 * This is a Flight Planner server.
 *
 * API version: 1.0.0
 * Contact: maiarabarroso84@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"strconv"
	"time"
)

const (
	layoutISO = "2006-01-02"
)

func getFlights(w http.ResponseWriter, r *http.Request) {

	queryValues := r.URL.Query()
	origin := queryValues.Get("origin")
	destination := queryValues.Get("destination")
	outboundWeekDay, _ := strconv.Atoi(queryValues.Get("outboundWeekDay"))
	duration, _ := strconv.Atoi(queryValues.Get("duration"))

	intervals := getDateIntervals(time.Weekday(outboundWeekDay), duration, time.Now(), time.Now().AddDate(0, 3, 0))
	data := url.Values{}
	data.Set("cabinClass", "business")
	data.Set("country", "UK")
	data.Set("currency", "GBP")
	data.Set("locale", "en-UK")
	data.Set("adults", "1")
	data.Set("originPlace", origin)
	data.Set("destinationPlace", destination)

	var flightResults []FlightsResult
	var counter = 0
	for i := 0; i < len(intervals); i++ {
		data.Set("outboundDate", intervals[i].Outbound.Format(layoutISO))
		data.Set("inboundDate", intervals[i].Inbound.Format(layoutISO))

		flightResponse := getItineraries(data)

		for _, it := range flightResponse.Itineraries {
			result := FlightsResult{}

			// Setting result AgentInfo
			var agentsInfo []AgentInfo
			for _, po := range it.PricingOptions {
				agent := searchAgentByID(flightResponse.Agents, po.AgentIds[0])
				agentsInfo = append(agentsInfo, AgentInfo{agent.Name, agent.ImageURL, po.Price, po.DeeplinkURL})
			}
			result.AgentsInfo = agentsInfo

			// Setting result InboundLeg
			result.InboundLeg = configResponseLeg(flightResponse, it.InboundLegID)

			// Setting result OutboundLeg
			result.OutboundLeg = configResponseLeg(flightResponse, it.OutboundLegID)

			flightResults = append(flightResults, result)
			// log.Println("RESULT: ", result)
			counter += 1
			log.Println("Itinaerary #", counter)
		}
	}
	log.Println("#results: ", counter)

	flightResultJSON, err := json.Marshal(flightResults)
	if err != nil {
		fmt.Printf("The response marshalling failed with error %s\n", err)
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
	w.Write(flightResultJSON)
}

func configResponseLeg(flightResponse FlightsResponse, legID string) LegResponse {

	leg := searchLegByID(flightResponse.Legs, legID)

	var stops []PlaceResponse
	for _, stopID := range leg.StopsIds {
		stop := searchPlaceByID(flightResponse.Places, stopID)
		stops = append(stops, PlaceResponse{stop.Name, stop.Code})
	}

	origin := searchPlaceByID(flightResponse.Places, leg.OriginStation)
	destination := searchPlaceByID(flightResponse.Places, leg.DestinationStation)

	var carriers []CarrierResponse
	for _, carrierID := range leg.CarrierIds {
		carrier := searchCarrierByID(flightResponse.Carriers, carrierID)
		carriers = append(carriers, CarrierResponse{carrier.Name, carrier.ImageURL})
	}

	var segs []SegmentResponse
	for _, segID := range leg.SegmentIds {
		seg := searchSegmentByID(flightResponse.Segments, segID)
		origin := searchPlaceByID(flightResponse.Places, seg.OriginStation)
		destination := searchPlaceByID(flightResponse.Places, seg.DestinationStation)
		segResponse := SegmentResponse{
			PlaceResponse{origin.Name, origin.Code},
			PlaceResponse{destination.Name, destination.Code},
			seg.DepartureDateTime,
			seg.ArrivalDateTime,
			seg.Duration}
		segs = append(segs, segResponse)
	}

	return LegResponse{leg.Departure, leg.Arrival, leg.Duration, stops, origin.Code, destination.Code,
		carriers, segs}
}

type FlightsResult struct {
	AgentsInfo  []AgentInfo
	InboundLeg  LegResponse
	OutboundLeg LegResponse
}

type AgentInfo struct {
	Name        string
	ImageURL    string
	Price       float64
	DeepLinkURL string
}

type LegResponse struct {
	Departure   MyTime
	Arrival     MyTime
	Duration    int
	Stops       []PlaceResponse // place codes
	Origin      string          // place code
	Destination string          //place code
	Carriers    []CarrierResponse
	Segments    []SegmentResponse
}

type CarrierResponse struct {
	Name     string
	ImageURL string
}

type SegmentResponse struct {
	Origin      PlaceResponse
	Destination PlaceResponse
	Departure   MyTime
	Arrival     MyTime
	Duration    int
}

type PlaceResponse struct {
	Name string
	Code string
}
